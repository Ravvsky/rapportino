generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  TOTPSecret    String?
  reports       Report[]
  role          Role           @default(USER)
  notifications Notification[]

  //NextAuth
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Team {
  id      Int        @id @default(autoincrement())
  name    String
  members UserTeam[] @relation("TeamMembers")
}

model UserTeam {
  id        Int      @id @default(autoincrement())
  userId    String
  teamId    Int
  isInvited Boolean  @default(true)
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())
  Team      Team     @relation(fields: [teamId], references: [id], name: "TeamMembers")

  @@unique([userId, teamId])
}

enum TeamRole {
  MEMBER
  MANAGER
}

enum Role {
  USER
  ADMIN
  TEAM_MANAGER
}

model Report {
  id          Int      @id @default(autoincrement())
  userId      String
  date        DateTime
  user        User     @relation(fields: [userId], references: [id])
  workedHours Float

  @@unique([userId, date])
}

//NextAuth
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Notification {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  url         String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}
