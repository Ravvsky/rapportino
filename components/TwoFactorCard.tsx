"use client";

import { useState } from "react";
import { Button } from "./ui/button";
import { CardContent } from "./ui/card";
import { Input } from "./ui/input";
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSeparator,
  InputOTPSlot,
} from "@/components/ui/input-otp";
import validateTOTPToken from "@/app/_actions/validateTOTPToken";
import { useToast } from "./ui/use-toast";

const TwoFactorCard = ({
  qrCodeImage,
  secret,
  is2FAEnabled,
}: {
  qrCodeImage: string;
  secret: string;
  is2FAEnabled: boolean;
}) => {
  const [isSectionOpen, setIsSectionOpen] = useState(false);
  const [OTPInputValue, setOTPInputValue] = useState("");
  const { toast } = useToast();

  return (
    <CardContent>
      {isSectionOpen && (
        <div className="flex flex-col gap-8">
          <div className="flex justify-between">
            <div className="flex flex-col justify-center">
              <p>
                1. You will need an authenticator mobile app to complete this
                process, such as one of the following options. These apps
                provide an added layer of security by generating unique codes
                that help verify your identity before granting access.
              </p>

              <ul className="pt-2">
                <li>Google Authenticator</li>
                <li>Microsoft Authenticator </li>
                <li>Authy</li>
              </ul>
            </div>
            <div className="w-full flex justify-center">
              <img src={qrCodeImage} />
            </div>
          </div>
          <div className="flex flex-col gap-4">
            <p>2. Scan the QR Code with your authenticator</p>
            <p className="text-sm text-muted-foreground">
              If you can&apos;t scan the code, you can enter this secret key
              into your authentication app
            </p>
            <Input type="text" value={secret} onChange={() => {}}></Input>
          </div>
          <div className="flex flex-col gap-4">
            <p>
              3.After scanning the QR code above, enter the six-digit code
              generated by your authenticator
            </p>
            <InputOTP
              maxLength={6}
              onChange={(value) => setOTPInputValue(value)}
            >
              <InputOTPGroup>
                <InputOTPSlot index={0} />
                <InputOTPSlot index={1} />
                <InputOTPSlot index={2} />
              </InputOTPGroup>
              <InputOTPSeparator />
              <InputOTPGroup>
                <InputOTPSlot index={3} />
                <InputOTPSlot index={4} />
                <InputOTPSlot index={5} />
              </InputOTPGroup>
            </InputOTP>
          </div>
          <div className="flex gap-4 justify-end">
            <Button
              variant={"outline"}
              onClick={() => {
                setIsSectionOpen(false);
              }}
            >
              Cancel
            </Button>
            <Button
              onClick={() => {
                validateTOTPToken(secret, OTPInputValue, false).then((res) => {
                  if (res !== null) {
                    toast({
                      title: "Two Factor succesfully added!",
                      description:
                        "On next login you will be required to insert code from your authenticator app",
                    });
                    setIsSectionOpen(false);
                  }
                });
              }}
            >
              Verify
            </Button>
          </div>
        </div>
      )}

      {!isSectionOpen && (
        <Button onClick={() => setIsSectionOpen(true)} disabled={is2FAEnabled}>
          Enable
        </Button>
      )}
    </CardContent>
  );
};

export default TwoFactorCard;
